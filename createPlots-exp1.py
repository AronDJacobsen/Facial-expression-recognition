#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan 20 15:35:41 2020

@author: Aron Djurhuus Jacobsen, Albert Kjøller Jacobsen & Phillip Chavarria Højbjerg
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

#below imported function is used to plot the confusion matrix
#link: https://www.kaggle.com/grfiv4/plot-a-confusion-matrix
from plot_cm import plot_confusion_matrix


#manually do this;
#1. paste the observed data from the experiments in f1, f2..fn
#2. write the order of which video the test subjects have seen with respect to the order of f1, f2..fn


#below is the data from each of our test subjects in experiment 1
f1 = [[[0.0744, 0.0562, 0.03339, 0.00597, 0.54279, 0.28724]], [[0.13365, 0.03745, 0.00136, 0.00556, 0.33964, 0.48234]], [[0.25648, 0.03121, 0.0, 0.00306, 0.17258, 0.53667]], [[0.20912, 0.05598, 0.02988, 0.00722, 0.44467, 0.25313]], [[0.27101, 0.0567, 0.07739, 0.01338, 0.25664, 0.32489]], [[0.2879, 0.04615, 0.11952, 0.01404, 0.30251, 0.22987]], [[0.04915, 0.03885, 0.00021, 0.0111, 0.64726, 0.25343]], [[0.05461, 0.06953, 0.1097, 0.02501, 0.55804, 0.18312]], [[0.13185, 0.06866, 0.02373, 0.02061, 0.4542, 0.30095]], [[0.00148, 0.00455, 0.0, 0.0001, 0.97722, 0.01665]], [[0.05715, 0.01176, 1e-05, 0.00575, 0.7992, 0.12613]], [[0.07819, 0.01099, 0.0, 0.00178, 0.39178, 0.51725]]]
f2 = [[[0.28516, 0.08557, 0.00024, 0.00269, 0.54816, 0.07818]], [[0.69457, 0.06417, 0.00868, 0.00901, 0.08373, 0.13984]], [[0.71648, 0.04365, 0.0, 0.00146, 0.21837, 0.02004]], [[0.64661, 0.03529, 0.0, 0.00135, 0.24404, 0.07271]], [[0.44686, 0.02636, 0.0, 0.00252, 0.1746, 0.34966]], [[0.37366, 0.07206, 0.2751, 0.01314, 0.0949, 0.17114]], [[0.34595, 0.05168, 0.13913, 0.00937, 0.35048, 0.1034]], [[0.47987, 0.04109, 0.17646, 0.00519, 0.15928, 0.13811]], [[0.5648, 0.04331, 0.10502, 0.00398, 0.15353, 0.12936]], [[0.62632, 0.03352, 0.25178, 0.00099, 0.06301, 0.02438]], [[0.66508, 0.03189, 0.18349, 0.00031, 0.09074, 0.02848]], [[0.47452, 0.0339, 0.10257, 0.00589, 0.16651, 0.21661]]]
f3 = [[[0.00508, 0.01799, 0.31776, 0.00401, 0.63465, 0.02051]], [[0.08247, 0.03934, 0.15285, 0.02762, 0.61187, 0.08585]], [[0.00032, 0.00654, 0.30318, 0.00077, 0.68665, 0.00254]], [[0.03876, 0.03851, 0.19077, 0.01004, 0.67981, 0.04211]], [[0.06539, 0.03554, 0.21515, 0.00856, 0.63844, 0.03693]], [[0.18123, 0.02319, 0.00385, 0.00066, 0.76236, 0.02871]], [[0.53829, 0.09142, 1e-05, 0.02083, 0.26513, 0.08431]], [[0.01817, 0.04074, 0.07806, 0.02944, 0.68491, 0.14868]], [[0.01496, 0.02519, 0.20458, 0.0163, 0.57954, 0.15942]], [[0.08362, 0.02738, 0.08944, 0.00789, 0.73487, 0.05679]], [[0.19901, 0.03622, 0.0, 0.00033, 0.707, 0.05745]], [[0.03882, 0.02232, 0.0, 3e-05, 0.93881, 1e-05]]]
f4 = [[[0.00192, 3e-05, 0.0, 0.0, 0.9961, 0.00195]], [[1e-05, 4e-05, 0.0, 1e-05, 0.99742, 0.00253]], [[0.0, 1e-05, 0.0, 0.0, 0.99999, 0.0]], [[0.00133, 5e-05, 0.0, 0.0, 0.99858, 2e-05]], [[0.00189, 0.00035, 0.0, 2e-05, 0.9977, 5e-05]], [[0.04804, 0.00795, 0.00019, 0.00082, 0.93931, 0.00368]], [[0.0, 0.0, 1e-05, 0.0, 0.99999, 0.0]], [[0.0, 6e-05, 1e-05, 0.0, 0.99993, 0.0]], [[1e-05, 4e-05, 0.0, 0.0, 0.99994, 1e-05]], [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]], [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]], [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]]]
f5 = [[[0.0966, 0.00314, 0.0, 2e-05, 0.8975, 0.00274]], [[0.05487, 0.00021, 0.0, 0.0, 0.94491, 0.0]], [[0.32268, 0.0215, 0.0, 3e-05, 0.65578, 1e-05]], [[0.07051, 0.00058, 0.0, 0.0, 0.92891, 0.0]], [[0.182, 0.00685, 0.0, 0.00019, 0.81076, 0.0002]], [[0.02218, 0.00085, 0.0, 3e-05, 0.97692, 2e-05]], [[0.08089, 0.00438, 2e-05, 0.00023, 0.91442, 6e-05]], [[0.28125, 0.02491, 0.0, 0.0013, 0.68742, 0.00511]], [[0.55317, 0.04196, 0.00906, 0.00166, 0.39107, 0.00307]], [[0.1837, 0.00744, 0.0, 0.00044, 0.80646, 0.00196]], [[0.22955, 0.01365, 0.0, 3e-05, 0.7567, 7e-05]], [[0.09993, 0.01544, 0.0, 0.00041, 0.86161, 0.02262]]]
f6 = [[[0.26197, 0.22805, 0.0, 0.00013, 0.50409, 0.00576]], [[0.11379, 0.12878, 0.0, 0.00021, 0.74993, 0.00729]], [[0.22485, 0.18491, 0.0, 0.00101, 0.5537, 0.03553]], [[0.31429, 0.26511, 0.0, 0.00063, 0.38502, 0.03495]], [[0.13572, 0.16359, 0.0, 0.00018, 0.68398, 0.01653]], [[0.31773, 0.1088, 0.0, 2e-05, 0.5657, 0.00775]], [[0.34623, 0.21586, 0.0, 0.00018, 0.39236, 0.04537]], [[0.28042, 0.20848, 0.0, 0.00035, 0.44291, 0.06784]], [[0.29898, 0.28937, 0.0, 6e-05, 0.4051, 0.00649]], [[0.25961, 0.05761, 0.0, 2e-05, 0.67276, 0.01]], [[0.11207, 0.18892, 0.0, 5e-05, 0.68873, 0.01022]], [[0.2049, 0.17964, 0.0, 4e-05, 0.60705, 0.00836]]]
f7 = [[[0.53534, 0.17902, 0.00107, 0.00038, 0.28348, 0.00071]], [[0.50082, 0.11864, 0.01506, 0.00123, 0.3621, 0.00216]], [[0.30121, 0.15107, 0.01498, 0.00137, 0.52595, 0.00542]], [[0.14079, 0.04889, 0.55301, 0.00138, 0.25415, 0.00178]], [[0.14937, 0.04007, 0.4136, 0.00853, 0.36096, 0.02747]], [[0.55591, 0.09079, 0.03061, 0.00593, 0.30629, 0.01047]], [[0.19429, 0.072, 0.34229, 0.00126, 0.38934, 0.00082]], [[0.50227, 0.10897, 0.0482, 0.00329, 0.33462, 0.00265]], [[0.12506, 0.04103, 0.58654, 0.00318, 0.22733, 0.01686]], [[0.32921, 0.14519, 0.09596, 0.01448, 0.3973, 0.01786]], [[0.19916, 0.13932, 0.02615, 0.00617, 0.62027, 0.00893]], [[0.173, 0.13163, 0.04317, 0.01047, 0.62494, 0.01679]]]
f8 = [[[7e-05, 0.00227, 0.71353, 1e-05, 0.26247, 0.02165]], [[0.16278, 0.15094, 0.03939, 0.00568, 0.46895, 0.17225]], [[0.14648, 0.05682, 0.0, 0.01586, 0.35526, 0.42558]], [[0.46959, 0.00735, 0.0, 0.00519, 0.00753, 0.51034]], [[0.05418, 0.02207, 3e-05, 0.00199, 0.85168, 0.07005]], [[0.00269, 0.01012, 0.00026, 0.00307, 0.83261, 0.15126]], [[0.12756, 0.21159, 0.21167, 0.00387, 0.4018, 0.04351]], [[0.10862, 0.06721, 0.11306, 0.01202, 0.5089, 0.19021]], [[0.02154, 0.03725, 0.14257, 0.00532, 0.69384, 0.09947]], [[0.08984, 0.06414, 0.0, 0.00447, 0.63131, 0.21025]], [[0.15689, 0.02775, 1e-05, 0.0008, 0.80918, 0.00537]], [[0.46994, 0.04491, 0.0, 0.00347, 0.21731, 0.26436]]]
f9 = [[[0.06908, 0.0167, 0.00053, 0.00638, 0.37884, 0.52847]], [[0.16961, 0.05251, 0.2207, 0.0061, 0.42626, 0.12481]], [[0.70874, 0.06974, 0.0004, 0.00158, 0.17278, 0.04676]], [[0.37883, 0.0351, 0.06758, 0.00844, 0.24684, 0.26322]], [[0.29947, 0.01443, 0.0, 0.00311, 0.22877, 0.45422]], [[0.458, 0.07268, 0.0082, 0.00837, 0.21196, 0.2408]], [[0.08676, 0.00735, 0.0, 0.00223, 0.12807, 0.77559]], [[0.09067, 0.03606, 0.0, 0.00263, 0.27008, 0.60056]], [[0.17936, 0.1986, 0.0, 0.00099, 0.57794, 0.04311]], [[0.1321, 0.02671, 0.00078, 0.00306, 0.81842, 0.01892]], [[0.27641, 0.1043, 0.0832, 0.01046, 0.36521, 0.16043]], [[0.08819, 0.02652, 0.0, 0.00382, 0.2164, 0.66507]]]
f10 = [[[0.10686, 0.06536, 0.00745, 0.02287, 0.54067, 0.25679]], [[0.63351, 0.02319, 0.00247, 0.00225, 0.32444, 0.01414]], [[0.61627, 0.0242, 0.0, 9e-05, 0.3539, 0.00553]], [[0.10948, 0.04589, 0.00015, 0.00012, 0.84292, 0.00144]], [[0.00318, 0.00198, 0.0, 0.0, 0.99416, 0.00069]], [[0.00054, 1e-05, 0.0, 0.0, 0.99945, 0.0]], [[0.00169, 0.00261, 0.0, 0.0, 0.99571, 0.0]], [[0.00018, 0.00088, 0.0, 1e-05, 0.99402, 0.00491]], [[0.00183, 0.01842, 0.0, 0.00067, 0.80747, 0.17161]], [[0.01993, 0.02129, 1e-05, 0.00029, 0.90237, 0.05612]], [[0.04176, 0.01423, 0.00015, 0.00013, 0.79721, 0.14652]], [[0.05064, 0.02561, 0.00026, 0.00313, 0.84379, 0.07657]]]
f11 = [[[0.22494, 0.03921, 0.0, 0.00034, 0.54175, 0.19377]], [[0.32976, 0.04336, 0.0, 0.0006, 0.50333, 0.12295]], [[0.52172, 0.03605, 0.0, 0.00056, 0.28228, 0.15939]], [[0.23364, 0.09379, 0.0, 0.00067, 0.44935, 0.22255]], [[0.3195, 0.04148, 0.0, 0.00311, 0.30997, 0.32593]], [[0.08621, 0.05784, 0.0, 0.00249, 0.55753, 0.29593]], [[0.14598, 0.13175, 0.0, 0.00324, 0.48848, 0.23055]], [[0.20207, 0.0802, 0.0, 0.00802, 0.23969, 0.47002]], [[0.10704, 0.10229, 0.0, 0.00419, 0.55804, 0.22844]], [[0.19048, 0.11437, 0.0, 0.00387, 0.48391, 0.20737]], [[0.13321, 0.06411, 0.0, 0.00313, 0.7005, 0.09905]], [[0.01537, 0.04549, 0.0, 0.00111, 0.89178, 0.04625]]]
f12 = [[[0.92706, 0.00494, 0.0, 0.00103, 0.06567, 0.0013]], [[0.94469, 0.00605, 0.01956, 0.00003, 0.02939, 0.00028]], [[0.85649, 0.00644, 0.0, 0.00017, 0.1271, 0.01271]], [[0.89444, 0.00068, 0.0, 0.0, 0.10488, 0.0]], [[0.99991, 0.00009, 0, 0, 0, 0]], [[0.9281, 0.00218, 0.0, 0.0, 0.06972, 0.0]], [[1.0, 0.0, 0.0, 0.0, 0.0, 0.0]], [[0.99409, 0.00012, 0, 0,  0.00578, 0]],[[0.99441, 0, 0, 0, 0.00559, 0]],[[1, 0, 0, 0, 0, 0]],[[0.9878, 0, 0, 0, 0.0122, 0.0]], [[0.929, 0.00151, 0, 0.00004, 0.05725, 0.01221]]]
f13 = [[[2e-05, 0.00095, 2e-05, 0.00019, 0.8595, 0.13932]], [[0.0, 1e-05, 0.0, 0.0, 0.50392, 0.49607]], [[0.00026, 0.00109, 0.51947, 0.00084, 0.22193, 0.25641]], [[0.00214, 0.00324, 0.53039, 0.00164, 0.37373, 0.08886]], [[0.00066, 0.00726, 0.1512, 0.0039, 0.38934, 0.44763]], [[0.0001, 0.00457, 0.0, 0.0006, 0.54804, 0.44669]], [[0.0044, 0.03278, 0.05038, 0.01263, 0.43964, 0.46017]], [[0.01358, 0.01481, 0.30924, 0.00713, 0.08704, 0.56819]], [[0.05032, 0.00177, 0.84949, 0.00222, 0.01828, 0.07793]], [[0.00267, 0.00853, 0.68758, 0.0055, 0.09522, 0.2005]], [[0.01562, 0.01462, 0.51091, 0.01455, 0.19826, 0.24604]], [[0.01731, 0.02151, 0.04931, 0.01455, 0.16631, 0.73101]]]
f14 = [[[0.002, 0.00206, 0.00017, 0.00037, 0.69589, 0.29951]], [[0.00085, 0.0002, 0.0, 6e-05, 0.74496, 0.25392]], [[4e-05, 2e-05, 0.0, 1e-05, 0.8674, 0.13253]], [[0.0002, 0.0003, 0.0, 0.00019, 0.84043, 0.15889]], [[0.00064, 0.00038, 0.03009, 4e-05, 0.61509, 0.35375]], [[3e-05, 0.00086, 0.1127, 0.00019, 0.60542, 0.28079]], [[0.0, 4e-05, 0.0, 2e-05, 0.86253, 0.13741]], [[0.0026, 0.0006, 0.03441, 0.00024, 0.81212, 0.15003]], [[0.00104, 0.00075, 0.04097, 0.00057, 0.7921, 0.16457]], [[1e-05, 2e-05, 0.0, 1e-05, 0.7663, 0.23368]], [[2e-05, 0.0, 0.0, 0.0, 0.91396, 0.08602]], [[9e-05, 0.00012, 0.0, 0.0001, 0.97844, 0.02125]]]
f15 = [[[0.20743, 0.04657, 0.0, 0.00083, 0.62641, 0.11876]], [[0.19528, 0.05135, 0.0115, 0.00395, 0.63546, 0.10246]], [[0.28198, 0.05247, 0.03415, 0.00565, 0.54653, 0.07923]], [[0.31623, 0.06454, 0.00025, 0.00285, 0.42265, 0.19348]], [[0.14874, 0.03297, 0.0, 0.00152, 0.75451, 0.06226]], [[0.24902, 0.04031, 0.00062, 0.00235, 0.63191, 0.07579]], [[0.14637, 0.04793, 0.00012, 0.00156, 0.70118, 0.10283]], [[0.17486, 0.04543, 0.00036, 0.00381, 0.68022, 0.09533]], [[0.2171, 0.05101, 0.00059, 0.00365, 0.63012, 0.09753]], [[0.14301, 0.03526, 0.002, 0.00282, 0.73038, 0.08653]], [[0.21799, 0.0653, 0.02436, 0.00367, 0.63419, 0.0545]], [[0.24358, 0.05251, 0.00714, 0.00358, 0.62471, 0.06848]]]
f16 = [[[0.14338, 0.01107, 0.0, 0.00253, 0.55369, 0.28934]], [[0.083, 0.05223, 0.14134, 0.00445, 0.64656, 0.07241]], [[0.47491, 0.04078, 0.03214, 0.00369, 0.38823, 0.06024]], [[0.27098, 0.01836, 0.01133, 0.00208, 0.66872, 0.02852]], [[0.18399, 0.01398, 0.00027, 0.00512, 0.6697, 0.12695]], [[0.33776, 0.03035, 0.10376, 0.0038, 0.50872, 0.01562]], [[0.19915, 0.02294, 0.03639, 0.00354, 0.70713, 0.03086]], [[0.26624, 0.02046, 0.01437, 0.00274, 0.63118, 0.06501]], [[0.38, 0.01637, 0.02201, 0.00163, 0.54075, 0.03925]], [[0.34378, 0.03908, 0.00749, 0.00579, 0.4235, 0.18036]], [[0.17242, 0.03262, 0.02901, 0.00583, 0.6662, 0.09392]], [[0.14676, 0.02087, 0.0, 0.00108, 0.80382, 0.02747]]]
f17 = [[[0.06049, 0.02905, 1e-05, 0.01694, 0.4145, 0.47901]], [[0.09188, 0.04664, 0.04178, 0.03306, 0.19217, 0.59447]], [[0.10311, 0.05426, 0.0, 0.02621, 0.376, 0.44043]], [[0.21042, 0.0505, 0.0, 0.01494, 0.19308, 0.53105]], [[0.07662, 0.01051, 3e-05, 0.01177, 0.0519, 0.84916]], [[0.12302, 0.00252, 0.0, 0.00342, 0.01008, 0.86096]], [[0.10173, 0.03091, 0.0, 0.00808, 0.27342, 0.58585]], [[0.14532, 0.04613, 0.04547, 0.02017, 0.29923, 0.44369]], [[0.28478, 0.09323, 0.00124, 0.04901, 0.16349, 0.40825]], [[0.49178, 0.0456, 2e-05, 0.02294, 0.10242, 0.33724]], [[0.15065, 0.03764, 0.0, 0.01181, 0.37929, 0.4206]], [[0.13746, 0.07185, 0.0, 0.01476, 0.38341, 0.39252]]]
f18 = [[[0.0047, 0.00643, 0.00011, 0.00083, 0.98764, 0.00029]], [[0.0014, 0.00244, 0.00012, 0, 0.99604, 0]], [[0.00941, 0.02411, 0.00502, 0.00008, 0.96134, 0.00004]], [[0, 0, 0, 0, 1, 0]], [[0, 0, 0, 0, 1, 0]], [[0.0001, 0.00001, 0, 0, 0.99989, 0]], [[0, 0, 0, 0, 1, 0]], [[0, 0, 0, 0, 1, 0]], [[0.00558, 0.00433, 0, 0, 0.9909, 0]], [[0.01773, 0, 0, 0, 0.98227, 0]], [[0, 0, 0, 0, 1, 0]], [[0.00638, 0.00001, 0, 0, 0.99361, 0]]]
f19 = [[[0.09831, 0.10877, 0.0109, 0.02657, 0.7383, 0.01715]], [[0.00064, 0.00665, 0, 0.00062, 0.96429, 0.0278]], [[0, 0, 0, 0, 1, 0]], [[0.00371, 0.0043, 0, 0.00107, 0.52959, 0.46133]], [[0.00239, 0.0495, 0, 0.00149, 0.53279, 0.41384]], [[0.02738, 0.04804, 0.00901, 0.0044, 0.65286, 0.25831]], [[0.0032, 0.1176, 0.03152, 0.00013, 0.88616, 0.06724]], [[0.00995, 0.01314, 0, 0.00063, 0.16081, 0.81547]], [[0.00001, 0.00206, 0, 0.00001, 0.99772, 0.0002]], [[0, 0.00027, 0, 0, 0.00067, 0.00006]], [[0.0001, 0.00025, 0, 0.0001, 0.77284, 0.22672]], [[0.01851, 0.00825, 0, 0.00135, 0.64238, 0.33052]]]
f20 = [[[0.06298, 0.00195, 0.0, 0.0012, 0.50572, 0.42816]], [[0.20595, 0.0144, 0.00012, 0.00799, 0.27108, 0.50045]], [[0.0691, 0.01399, 0.00141, 0.01005, 0.09456, 0.81088]], [[0.06558, 0.02542, 0.0002, 0.01952, 0.44592, 0.44335]], [[0.06846, 0.02391, 6e-05, 0.01264, 0.74466, 0.15027]], [[0.0096, 0.00454, 0.0, 0.00224, 0.96181, 0.02181]], [[0.11828, 0.00151, 0.00035, 0.00097, 0.12595, 0.75294]], [[0.24432, 0.00719, 0.0, 0.00564, 0.12122, 0.62162]], [[0.24058, 0.02131, 9e-05, 0.01905, 0.40227, 0.31671]], [[0.18055, 0.00534, 0.0, 0.00414, 0.05936, 0.7506]], [[0.08283, 0.01116, 0.00043, 0.00559, 0.56513, 0.33486]], [[0.07786, 0.00578, 1e-05, 0.0046, 0.15917, 0.75258]]]


#insert all the test data into one matrix
total = [f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20]



#these variables will contain all the values corresponding to their emotion
angry = []
fear = []
happy = []
sad = []
surprise = []
neutral = []

#create a loop to extract all the values for each emotions per person per video
for j in range(20):    
    for i in range(12):
        angry.append(total[j][i][0][0])
        fear.append(total[j][i][0][1])
        happy.append(total[j][i][0][2])
        sad.append(total[j][i][0][3])
        surprise.append(total[j][i][0][4])
        neutral.append(total[j][i][0][5])

#defining the categories
CATEGORIES = ["Angry", "Fear", "Happy", "Sad", "Surprise", "Neutral"]

#noting the video number the test subjects watched, same order inserted in F1, F2..F20
order = [2, 2, 4, 1, 5, 1, 5, 1, 2, 4, 4, 3, 5, 1, 3, 4, 5, 3, 2, 3]

#'pred' will contain a long 1-D array of expected emotions, this is used to compute the confusion matrix
pred = []

#actual will therefor contain the observed dominating emotion
actual = []
#variables used in loop to define interval of one test subjects emotions
t = 0
g = 12

#looping for every person, this is where the results will be calibrated
#the calibration is made per person
for j in range(20):  

    #these variables will contain the calibrated emotions
    angryP = []
    fearP = []
    happyP = []
    sadP = []
    surpriseP = []
    neutralP = []

    #calculate the average value per emotion through the whole experiment per person
    angry_mean = np.mean(angry[t:g])
    fear_mean = np.mean(fear[t:g])   
    happy_mean = np.mean(happy[t:g])
    sad_mean = np.mean(sad[t:g])
    surprise_mean = np.mean(surprise[t:g])
    neutral_mean = np.mean(neutral[t:g])

    #calculate the standard deviation (sd) per emotion through the whole experiment per person
    angry_std = np.std(angry[t:g])
    fear_std = np.std(fear[t:g])   
    happy_std = np.std(happy[t:g])
    sad_std = np.std(sad[t:g])
    surprise_std = np.std(surprise[t:g])
    neutral_std = np.std(neutral[t:g])  
    
    #if sd is 0 (due to zero activation) we are unable to divide hence it is just set to one
    if angry_std == 0:
        angry_std = 1
    if fear_std == 0:
        fear_std = 1
    if happy_std == 0:
        happy_std = 1
    if sad_std == 0:
        sad_std = 1        
    if surprise_std == 0:
        surprise_std = 1    
    if neutral_std == 0:
        neutral_std = 1
    
    #variables adjust for the next test subject to calibrate
    t = t + 12
    g = g + 12
    
    #now every value is adjusted for the test subject
    for i in range(12):
        
        #the calibration will minus the average and dividing by sd for emotion
        total[j][i][0][0] = (total[j][i][0][0]-angry_mean) / angry_std
        total[j][i][0][1] = (total[j][i][0][1]-fear_mean) / fear_std
        total[j][i][0][2] = (total[j][i][0][2]-happy_mean) / happy_std
        total[j][i][0][3] = (total[j][i][0][3]-sad_mean) / sad_std
        total[j][i][0][4] = (total[j][i][0][4]-surprise_mean) / surprise_std
        total[j][i][0][5] = (total[j][i][0][5]-neutral_mean) / neutral_std 
        
        #now variable 'actual' will get the calibrated predicted emotion
        actual.append(CATEGORIES[np.where(total[j][i]==np.max(total[j][i]))[1][0]])
        
        #every emotion will also get its calibrated value added
        angryP.append(angry[i+j*12])
        fearP.append(fear[i+j*12])
        happyP.append(happy[i+j*12])
        sadP.append(sad[i+j*12])
        surpriseP.append(surprise[i+j*12])
        neutralP.append(neutral[i+j*12])

    #now the variable 'pred' will get its list added for the confusion matrix
    if order[j] == 1:
        #Video 1
        pred.extend(['Happy','Surprise','Fear','Neutral','Angry','Fear','Happy','Surprise','Neutral','Sad','Angry','Sad'])
    if order[j] == 2:
        #Video 2
        pred.extend(['Neutral','Surprise','Surprise','Fear','Neutral','Happy','Angry','Happy','Sad','Sad','Fear','Angry'])
    if order[j] == 3:
        #Video 3
        pred.extend(['Sad','Happy','Surprise','Sad','Fear','Angry','Neutral','Fear','Surprise','Neutral','Happy','Angry'])
    if order[j] == 4:
        #Video 4
        pred.extend(['Surprise','Angry','Surprise','Neutral','Neutral','Fear','Sad','Happy','Fear','Happy','Sad','Angry'])
    if order[j] == 5:
        #Video 5
        pred.extend(['Sad','Neutral','Surprise','Fear','Neutral','Sad','Angry','Surprise','Happy','Happy','Angry','Fear'])
    
    
    #code below to plot is inspired from: 
    #https://matplotlib.org/3.1.0/gallery/subplots_axes_and_figures/subplots_demo.html


    #now the plot will be printet
    #define amount of subplots     
    fig, axs = plt.subplots(6, sharex=True)
    #give the plot the a title corresponding to test subject
    fig.suptitle('Exp. 1 - Test subject no. {:d}'.format(j+1))
    #define the values
    axs[0].plot(np.arange(12), angryP, '.', linestyle='-')
    #set the title for the subplot
    axs[0].set_title('Angry')
    
    axs[1].plot(np.arange(12), fearP, '.',linestyle='-')
    axs[1].set_title('Fear')
    
    axs[2].plot(np.arange(12), happyP, '.',linestyle='-')
    axs[2].set_title('Happy')
    
    axs[3].plot(np.arange(12), sadP, '.',linestyle='-')
    axs[3].set_title('Sad')
    
    axs[4].plot(np.arange(12), surpriseP, '.',linestyle='-')
    axs[4].set_title('Surprise')
    
    axs[5].plot(np.arange(12), neutralP, '.',linestyle='-')
    axs[5].set_title('Neutral')
    
    #setting the x label
    for ax in axs.flat:
        ax.set(xlabel='Expected emotion per 30 sec. video')
        plt.xticks(np.arange(12), pred[12*j:12*j+12], rotation=45)

    #hide x labels for top plots   
    for ax in axs.flat:
        ax.label_outer()
    #setting height between plots   
    plt.subplots_adjust(hspace=2)
    #setting the y label to be in the middle and not too close to the y values
    fig.text(0.06, 0.5, 'Calibrated observation\n\n\n\n\n\n', ha='center', va='center', rotation='vertical')
    plt.show()
    #saving with the command below will not save the full plot
    #plt.savefig('Exp.1-Test subject no. {:d}.png'.format(j+1))    


#plotting the confusion matrix using the imported function
array = confusion_matrix(actual, pred, labels=["Angry", "Fear", "Happy", "Sad", "Surprise", "Neutral"])
plot_confusion_matrix(cm = array, normalize = False, target_names = ["Angry", "Fear", "Happy", "Sad", "Surprise", "Neutral"])






