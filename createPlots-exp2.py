#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan 20 17:39:08 2020

@author: Aron Djurhuus Jacobsen, Albert Kjøller Jacobsen & Phillip Chavarria Højbjerg
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

#below imported function is used to plot the confusion matrix
#link: https://www.kaggle.com/grfiv4/plot-a-confusion-matrix
from plot_cm import plot_confusion_matrix


#manually paste the data per person from the experiment






#below is the data from each of our test subjects in experiment 2
f1 = [[[0.1249, 0.00585, 0.0, 0.00172, 0.20362, 0.66391]], [[0.67501, 0.00824, 0.0, 0.00157, 0.09163, 0.22355]], [[0.0407, 0.00521, 0.08773, 0.0012, 0.74484, 0.12034]], [[0.03277, 0.03344, 0.85702, 0.00185, 0.02857, 0.04635]], [[0.10001, 0.11059, 0.0, 0.0039, 0.45841, 0.32709]], [[0.01864, 0.01773, 0.10404, 0.00187, 0.82956, 0.02816]]]
f2 = [[[0.05856, 0.01108, 0.70265, 0.00217, 0.22275, 0.00279]], [[0.40905, 0.04505, 0.07169, 0.01175, 0.24547, 0.217]], [[0.14375, 0.04954, 0.51646, 0.00277, 0.27563, 0.01184]], [[0.27454, 0.05904, 0.45423, 0.02121, 0.08815, 0.10284]], [[0.41653, 0.03782, 0.0, 0.02306, 0.24729, 0.2753]], [[0.55443, 0.06235, 0.01108, 0.03432, 0.09574, 0.24208]]]
f3 = [[[0.00027, 0.00379, 0.0, 0.00117, 0.92547, 0.0693]], [[0.00536, 0.01211, 5e-05, 0.00939, 0.91362, 0.05948]], [[0.01273, 0.05012, 0.19351, 0.02334, 0.63138, 0.08893]], [[0.01442, 0.02936, 0.09826, 0.02417, 0.79143, 0.04236]], [[0.0, 0.0054, 0.0002, 3e-05, 0.99371, 0.00066]], [[1e-05, 0.00351, 0.00603, 1e-05, 0.99025, 0.00019]]]
f4 = [[[0.01239, 0.00254, 0.0, 0.00211, 0.97453, 0.00844]], [[5e-05, 0.00013, 0.0, 0.0, 0.99982, 0.0]], [[0.0, 0.0, 0.52211, 0.0, 0.47789, 0.0]], [[0.0, 0.0, 0.22488, 0.0, 0.77512, 0.0]], [[0.0, 0.0, 2e-05, 0.0, 0.99998, 0.0]], [[0.0, 1e-05, 0.01612, 0.0, 0.98387, 0.0]]]
f5 = [[[0.68779, 0.00134, 0.0, 0.0, 0.31087, 0.0]], [[0.29114, 0.00345, 0.0, 0.0004, 0.69656, 0.00845]], [[0.45542, 0.0175, 0.0, 0.00053, 0.5175, 0.00906]], [[0.77767, 0.01553, 0.0, 2e-05, 0.20677, 1e-05]], [[0.03328, 0.00044, 0.0, 0.0, 0.96627, 0.0]], [[0.11888, 0.00219, 0.0, 0.00046, 0.87492, 0.00355]]]
f6 = [[[0.66211, 0.11557, 0.0, 0.00019, 0.10017, 0.12195]], [[0.30932, 0.01993, 0.0, 1e-05, 0.15469, 0.51605]], [[0.25181, 0.13492, 0.01721, 3e-05, 0.57937, 0.01667]], [[0.40259, 0.1098, 0.18455, 0.00011, 0.19025, 0.11269]], [[0.13921, 0.09827, 0.0, 0.00027, 0.12556, 0.63669]], [[0.02971, 0.10051, 0.0, 9e-05, 0.4629, 0.40679]]]
f7 = [[[0.99998, 2e-05, 0.0, 0.0, 0.0, 0.0]], [[0.19901, 0.00021, 0.12073, 0.0, 0.68005, 0.0]], [[0.01343, 0.00386, 0.81157, 0.0, 0.17114, 0.0]], [[0.04469, 0.01819, 0.05052, 2e-05, 0.88658, 1e-05]], [[0.0, 2e-05, 0.0, 0.0, 0.99998, 0.0]], [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]]]
f8 = [[[0.81253, 0.00655, 0.0, 4e-05, 0.18048, 0.00039]], [[0.20001, 1e-05, 0.0, 1e-05, 0.77143, 0.02854]], [[0.00445, 0.00236, 0.71429, 0.0, 0.27891, 0.0]], [[0.08863, 0.16551, 0.24324, 0.00792, 0.20518, 0.28951]], [[0.15641, 0.00086, 0.0, 3e-05, 0.84269, 1e-05]], [[0.17003, 0.08353, 0.0, 0.00939, 0.36489, 0.37216]]]
f9 = [[[0.61235, 0.01835, 0.0, 0.00076, 0.03158, 0.33697]], [[0.56167, 0.01166, 0.0, 0.00821, 0.17696, 0.2415]], [[0.13467, 0.02765, 0.40797, 0.00664, 0.35561, 0.06745]], [[0.16242, 0.03006, 0.31522, 0.01481, 0.24593, 0.23157]], [[0.30097, 0.02752, 0.43141, 0.00377, 0.12676, 0.10957]], [[0.16823, 0.05572, 0.4083, 0.00989, 0.25308, 0.10477]]]
f10 = [[[0.13643, 0.00655, 0.0, 0.00338, 0.67475, 0.17889]], [[0.33167, 0.02795, 0.0, 0.01972, 0.26181, 0.35885]], [[0.00686, 0.01027, 0.08439, 0.00019, 0.89431, 0.00399]], [[0.04086, 0.04673, 0.26571, 0.02748, 0.10596, 0.51325]], [[0.01684, 0.05615, 0.00225, 0.00242, 0.43019, 0.49215]], [[0.0001, 0.00478, 0.0, 9e-05, 0.98948, 0.00554]]]
f11 = [[[0.00024, 0.01251, 0.0, 0.00012, 0.98621, 0.00092]], [[0.0018, 0.01536, 0.0, 0.00151, 0.90192, 0.07941]], [[0.03864, 0.05532, 0.00619, 0.01068, 0.645, 0.24418]], [[0.00371, 0.00545, 0.0, 0.00077, 0.89437, 0.09571]], [[0.00573, 0.00373, 0.0, 0.00059, 0.92483, 0.06512]], [[0.0008, 0.00966, 0.0, 0.00075, 0.91304, 0.07576]]]
f12 = [[[1, 0, 0, 0, 0, 0]], [[0.97222, 0, 0, 0, 0.02778, 0]], [[0.99408, 0.0001, 0, 0, 0.00582, 0]], [[1, 0, 0, 0, 0, 0]], [[0.42693, 0.00006, 0, 0, 0.57301, 0]], [[0.5608, 0.00001, 0, 0, 0.43918, 0]]]
f13 = [[[0.00044, 0.00226, 0.00697, 0.00111, 0.70369, 0.28553]], [[0.00158, 0.00195, 0.0, 0.0001, 0.01719, 0.97917]], [[0.0, 0.0, 0.00073, 0.0, 0.99927, 0.0]], [[0.16092, 0.0, 0.76179, 0.0, 0.07154, 0.00575]], [[4e-05, 0.00018, 0.0, 0.00021, 0.06981, 0.92976]], [[0.46968, 0.02365, 0.01753, 0.00021, 0.48801, 0.00092]]]
f14 = [[[0.02617, 0.02077, 2e-05, 0.0273, 0.78884, 0.1369]], [[0.00686, 0.00557, 0.0, 0.00012, 0.96873, 0.01872]], [[7e-05, 0.00011, 0.0, 0.00024, 0.99429, 0.00529]], [[0.02748, 0.04148, 0.00021, 0.01143, 0.88797, 0.03143]], [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]], [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]]]
f15 = [[[0.00017, 0.005, 0.0, 0.00252, 0.44205, 0.55025]], [[0.00283, 0.0027, 0.0, 0.00019, 0.98401, 0.01028]], [[0.00299, 0.00081, 4e-05, 1e-05, 0.97361, 0.02255]], [[0.02055, 0.00408, 0.0, 3e-05, 0.97528, 6e-05]], [[2e-05, 3e-05, 0.0, 0.0, 0.99995, 0.0]], [[0.00227, 0.00028, 0.0, 0.0, 0.99745, 0.0]]]
f16 = [[[0.92799, 0.02695, 0.0, 0.0002, 0.04176, 0.0031]], [[0.13321, 0.00012, 0.0, 0.0, 0.86667, 0.0]], [[0.02641, 0.00865, 0.34886, 0.00261, 0.60801, 0.00546]], [[0.27107, 0.01017, 0.0, 0.00177, 0.67948, 0.0375]], [[0.02127, 0.00016, 0.0, 0.0, 0.97857, 0.0]], [[0.03053, 0.02263, 1e-05, 0.00852, 0.82091, 0.1174]]]
f17 = [[[0.01713, 0.00375, 0.0, 0.00148, 0.28656, 0.69108]], [[0.14261, 0.01408, 0.0, 0.00352, 0.31766, 0.52213]], [[0.10135, 0.0268, 0.00014, 0.00331, 0.65612, 0.21229]], [[0.30701, 0.07669, 0.00023, 0.01489, 0.26239, 0.33879]], [[0.02472, 0.00065, 0.0, 0.00071, 0.22814, 0.74579]], [[0.00235, 0.00089, 0.0, 0.00017, 0.9736, 0.02298]]]
f18 = [[[0.02688, 0.02988, 0.00158, 0.0045, 0.93528, 0.00188]], [[0, 0, 0, 0, 1, 0]], [[0, 0, 0, 0, 1, 0]], [[0, 0, 0, 0, 1, 0]], [[0, 0, 0, 0, 1, 0]], [[0, 0, 0, 0, 1, 0]]]
f19 = [[[0.04326, 0.03494, 0.00226, 0.00554, 0.9116, 0.00239]], [[0.00008, 0.0017, 0.00001, 0, 0.99821, 0]], [[0.00013, 0.00366, 0.01225, 0, 0.98396, 0]], [[0, 0.00002, 0, 0.00001, 0.9744, 0.02558]], [[0, 0.00004, 0, 0, 0.99995, 0.00002]], [[0.28441, 0.02289, 0, 0.00079, 0.67811, 0.0138]]]
f20 = [[[0.4433, 0.00578, 0.0, 3e-05, 0.18463, 0.36626]], [[0.8873, 0.00025, 0.0, 0.0, 0.0622, 0.05025]], [[0.01148, 2e-05, 0.0, 0.0, 0.98284, 0.00566]], [[0.01149, 2e-05, 0.29984, 0.0, 0.68865, 0.0]], [[0.0, 0.0001, 0.0, 0.0, 0.76863, 0.23127]], [[0.0, 1e-05, 0.0, 0.0, 0.98576, 0.01422]]]
f21 = [[[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]], [[0.08098, 0.04782, 0.0, 0.00025, 0.86276, 0.0082]], [[0.00015, 0.00025, 0.63796, 0.0, 0.36164, 0.0]], [[0.35894, 0.0966, 0.04524, 0.00036, 0.49611, 0.00274]], [[0.06437, 0.01502, 0.0, 0.0, 0.92062, 0.0]], [[0.2583, 0.13904, 0.00995, 0.00108, 0.54916, 0.04247]]]
f22 = [[[0.49895, 0.00188, 0.0, 0.00303, 0.0, 0.49614]], [[0.10846, 0.02422, 0.02352, 0.00841, 0.47886, 0.35654]], [[0.02367, 0.02053, 0.76461, 0.00267, 0.16167, 0.02685]], [[0.0241, 0.00876, 0.2801, 0.01389, 0.03188, 0.64127]], [[0.00995, 0.00067, 0.03212, 0.00527, 0.83188, 0.12012]], [[0.01119, 0.01679, 0.26226, 0.01836, 0.27399, 0.41741]]]
f23 = [[[0.0988, 0.01342, 0.0, 0.00943, 0.42031, 0.45804]], [[0.08955, 0.03757, 0.0, 0.01003, 0.7155, 0.14735]], [[0.00086, 0.00058, 0.55293, 0.0, 0.44563, 0.0]], [[0.20238, 0.02709, 0.29576, 9e-05, 0.4732, 0.00147]], [[0.12018, 0.0221, 0.0, 0.0, 0.85772, 0.0]], [[0.15354, 0.01879, 8e-05, 0.00157, 0.81159, 0.01443]]]
f24 = [[[0.43778, 0.11037, 0.0, 0.00368, 0.37877, 0.06941]], [[0.15962, 0.08296, 0.00688, 0.00651, 0.70464, 0.0394]], [[0.45034, 0.01062, 0.13114, 0.0, 0.4079, 0.0]], [[0.75339, 0.03374, 0.01915, 0.0, 0.19371, 0.0]], [[0.1654, 0.06244, 0.00312, 0.00023, 0.76791, 0.0009]], [[0.60258, 0.00862, 0.0, 0.0, 0.38688, 0.00192]]]
f25 = [[[0.12755, 0.20282, 0.23796, 0.05737, 0.00804, 0.36627]], [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]], [[0.06369, 0.03323, 0.51042, 0.01635, 0.32468, 0.05163]], [[0.08886, 0.04336, 0.01319, 0.01883, 0.32784, 0.50792]],[[6e-05, 0.00106, 0.0, 5e-05, 0.9593, 0.03952]], [[0.09553, 0.0026, 0, 0.00437, 0.42072, 0.47678]]]
f26 = [[[0.02648, 0.01656, 0.08637, 0.0, 0.87059, 0.0]], [[0.03126, 0.01561, 0.12213, 0.0, 0.83096, 5e-05]], [[0.03762, 0.00399, 0.28756, 2e-05, 0.62891, 0.04191]], [[0.12822, 0.05445, 0.10702, 6e-05, 0.71022, 3e-05]], [[0.0394, 0.0414, 0.05882, 0.00124, 0.84927, 0.00987]], [[0.06611, 0.02305, 0.30926, 7e-05, 0.59873, 0.00279]]]
f27 = [[[0.99781, 3e-05, 0.0, 4e-05, 0.0, 0.00213]], [[0.18328, 0.02512, 0.0, 0.00474, 0.54897, 0.23789]], [[0.02324, 0.01022, 0.72665, 0.00252, 0.18004, 0.05733]], [[0.69057, 0.0009, 0.2987, 0.00017, 0.0, 0.00965]], [[0.33123, 0.00547, 0.0, 0.00014, 0.65299, 0.01018]], [[0.48844, 0.05499, 0.0, 0.00321, 0.4145, 0.03886]]]
f28 = [[[0.58021, 0.00233, 0.41742, 0.0, 4e-05, 0.0]], [[0.33212, 0.0281, 0.36734, 0.00251, 0.25966, 0.01027]], [[0.0, 0.0, 0.99949, 0.0, 0.00051, 0.0]], [[0.78724, 0.00077, 0.21199, 0.0, 0.0, 0.0]], [[0.16734, 0.02416, 0.18776, 0.0, 0.62074, 0.0]], [[0.12073, 0.01786, 0.83321, 1e-05, 0.02819, 0.0]]]
f29 = [[[0.93595, 0.01878, 0.0, 0.0, 0.04527, 0.0]], [[0.63656, 0.04538, 0.0, 0.0024, 0.29977, 0.01589]], [[0.14216, 0.03977, 0.13688, 0.0, 0.68119, 0.0]], [[0.486, 0.00642, 0.02523, 0.0, 0.48235, 0.0]], [[0.38357, 0.00035, 0.0, 0.0, 0.61607, 0.0]], [[0.01303, 0.00675, 0.0, 2e-05, 0.98018, 2e-05]]]
f30 = [[[0.99941, 0.00058, 0.0, 1e-05, 0.0, 0.0]], [[0.32463, 0.03003, 0.0, 0.00032, 0.51885, 0.12617]], [[0.13753, 0.03362, 0.2703, 1e-05, 0.53984, 0.01869]], [[0.8073, 0.01365, 3e-05, 0.0, 0.17902, 0.0]], [[0.27257, 0.00213, 0.0, 0.0, 0.7253, 0.0]], [[0.01131, 0.003, 0.0, 0.0, 0.98569, 0.0]]]
f31 = [[[0.97141, 2e-05, 0.0, 0.0, 0.02857, 0.0]], [[0.24771, 0.00896, 0.0, 0.0, 0.74334, 0.0]], [[0.00862, 0.01716, 0.07907, 0.0, 0.89515, 0.0]], [[0.32617, 0.06733, 0.01313, 0.00295, 0.53386, 0.05657]], [[0.13192, 0.0103, 0.0, 0.0, 0.85778, 0.0]], [[0.00022, 0.00032, 0.0, 0.0, 0.99946, 0.0]]]
f32 = [[[0.97947, 0.00053, 0.0, 0.0, 0.02, 0.0]], [[0.27737, 0.02234, 0.0, 0.00166, 0.652, 0.04663]], [[0.0219, 0.01043, 0.05442, 0.0, 0.91325, 0.0]], [[0.57833, 0.02178, 0.0, 0.0, 0.39989, 0.0]], [[0.07557, 0.00435, 0.0, 0.0, 0.92008, 0.0]], [[0.06215, 0.01049, 0.0, 0.0, 0.92736, 0.0]]]
f33 = [[[0.82187, 0.01764, 0.0, 0.0, 0.16049, 0.0]], [[0.08609, 0.03447, 0.0, 0.00176, 0.86198, 0.0157]], [[0.43284, 0.04499, 0.02166, 0.0, 0.50051, 0.0]], [[0.68769, 0.01601, 0.0, 0.00044, 0.26798, 0.02788]], [[0.01296, 0.01549, 6e-05, 0.00153, 0.96792, 0.00203]], [[0.3288, 0.17415, 0.00017, 0.01201, 0.45846, 0.02641]]]
f34 = [[[0.91742, 0.0119, 0.0, 0.0, 0.07068, 0.0]], [[0.40541, 0.07085, 0.03364, 0.00201, 0.42864, 0.05945]], [[0.21179, 0.04815, 0.12079, 0.0, 0.61927, 0.0]], [[0.72473, 0.01905, 0.0, 0.0, 0.25622, 0.0]], [[0.15102, 0.00493, 0.0, 2e-05, 0.84403, 0.0]], [[0.63361, 0.01104, 0.0, 0.0, 0.35534, 0.0]]]
f35 = [[[0.39388, 0.08986, 0.0, 0.0, 0.51626, 0.0]], [[0.42437, 0.10351, 0.0, 2e-05, 0.47209, 0.0]], [[0.81072, 0.07293, 0.0463, 0.00019, 0.06978, 9e-05]], [[0.94159, 0.02539, 0.0018, 0.00112, 0.02001, 0.01009]], [[0.74241, 0.06477, 0.0, 0.00324, 0.15648, 0.0331]], [[0.92272, 0.01909, 0.0, 0.0, 0.05819, 0.0]]]
f36 = [[[0.25338, 0.02334, 0.0, 0.0, 0.72328, 0.0]], [[0.32769, 0.02689, 0.0, 0.0, 0.64541, 0.0]], [[0.00666, 0.006, 0.0, 0.0, 0.98733, 0.0]], [[0.24411, 0.21064, 0.00044, 0.0, 0.54482, 0.0]], [[0.04873, 0.01146, 0.0, 0.0, 0.93981, 0.0]], [[0.00285, 0.00274, 0.0, 0.0, 0.99441, 0.0]]]
f37 = [[[0.10918, 0.0021, 0.0, 0.00113, 0.04919, 0.83839]], [[0.40957, 0.00012, 0.0, 0.0001, 0.4027, 0.1875]], [[0.00012, 0.0002, 0.35414, 0.00026, 0.5806, 0.06468]], [[0.13417, 0.02559, 0.55172, 0.00366, 0.20448, 0.08037]], [[0.14676, 0.07283, 0.0, 0.0028, 0.75467, 0.02294]], [[0.0009, 0.00045, 0.0, 0.00016, 0.7425, 0.25599]]]
f38 = [[[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]], [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]], [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]], [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]], [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]], [[0.0022, 0.0029, 0.0, 6e-05, 0.9876, 0.00724]]]
f39 = [[[0.12518, 0.00016, 0.0, 0.00012, 0.09473, 0.77981]], [[0.88506, 0.0, 0.0, 0.0, 0.11494, 0.0]], [[0.30244, 0.0273, 0.0, 0.00191, 0.61039, 0.05796]], [[0.38205, 0.0455, 1e-05, 0.02369, 0.30291, 0.24585]], [[0.25901, 0.01367, 0.0, 0.00169, 0.63478, 0.09086]], [[0.06365, 0.01782, 0.0, 0.00114, 0.13757, 0.77983]]]
f40 = [[[0.04929, 0.0006, 0.0, 0.00026, 0.04167, 0.90817]], [[0.73482, 0.00869, 0.0, 0.00043, 0.23607, 0.02]], [[0.05595, 0.01177, 0.22435, 0.00061, 0.66752, 0.0398]], [[0.11987, 0.01716, 0.63239, 0.00785, 0.07924, 0.14348]], [[0.09911, 0.01351, 0.0, 0.00833, 0.70547, 0.17359]], [[0.09782, 0.00275, 0.0, 0.00226, 0.32551, 0.57166]]]

#insert all the test data into one matrix
total = [f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24,f25,f26,f27,f28,f29,f30,f31,f32,f33,f34,f35,f36,f37,f38,f39,f40]

#these variables will contain all the values corresponding to their emotion
angry = []
fear = []
happy = []
sad = []
surprise = []
neutral = []

#create a loop to extract all the values for each emotions per person per video
for j in range(40):    
    for i in range(6):
        angry.append(total[j][i][0][0])
        fear.append(total[j][i][0][1])
        happy.append(total[j][i][0][2])
        sad.append(total[j][i][0][3])
        surprise.append(total[j][i][0][4])
        neutral.append(total[j][i][0][5])

#defining the categories
CATEGORIES = ["Angry", "Fear", "Happy", "Sad", "Surprise", "Neutral"]

#actual will therefor contain the observed dominating emotion
actual = []
  
#variables used in loop to define interval of one test subjects emotions
t = 0
g = 6

#looping for every person, this is where the results will be calibrated
#the calibration is made per person
for j in range(40):  
    
    #these variables will contain the calibrated emotions
    angryP = []
    fearP = []
    happyP = []
    sadP = []
    surpriseP = []
    neutralP = []
    
    #calculate the average value per emotion through the whole experiment per person
    angry_mean = np.mean(angry[t:g])
    fear_mean = np.mean(fear[t:g])   
    happy_mean = np.mean(happy[t:g])
    sad_mean = np.mean(sad[t:g])
    surprise_mean = np.mean(surprise[t:g])
    neutral_mean = np.mean(neutral[t:g])
    
    #calculate the standard deviation (sd) per emotion through the whole experiment per person
    angry_std = np.std(angry[t:g])
    fear_std = np.std(fear[t:g])   
    happy_std = np.std(happy[t:g])
    sad_std = np.std(sad[t:g])
    surprise_std = np.std(surprise[t:g])
    neutral_std = np.std(neutral[t:g])  

    #if sd is 0 (due to zero activation) we are unable to divide hence it is just set to one
    if angry_std == 0:
        angry_std = 1
    if fear_std == 0:
        fear_std = 1
    if happy_std == 0:
        happy_std = 1
    if sad_std == 0:
        sad_std = 1        
    if surprise_std == 0:
        surprise_std = 1    
    if neutral_std == 0:
        neutral_std = 1
    
    #variables adjust for the next test subject to calibrate
    t = t + 6
    g = g + 6
    
    #now every value is adjusted for the test subject
    for i in range(6):
        
        #the calibration will minus the average and dividing by sd for emotion
        total[j][i][0][0] = (total[j][i][0][0]-angry_mean) / angry_std
        total[j][i][0][1] = (total[j][i][0][1]-fear_mean) / fear_std
        total[j][i][0][2] = (total[j][i][0][2]-happy_mean) / happy_std
        total[j][i][0][3] = (total[j][i][0][3]-sad_mean) / sad_std
        total[j][i][0][4] = (total[j][i][0][4]-surprise_mean) / surprise_std
        total[j][i][0][5] = (total[j][i][0][5]-neutral_mean) / neutral_std        
        
        #now variable 'actual' will get the calibrated predicted emotion
        actual.append(CATEGORIES[np.where(total[j][i]==np.max(total[j][i]))[1][0]])
        
        #every emotion will also get its calibrated value added
        angryP.append(angry[i+j*6])
        fearP.append(fear[i+j*6])
        happyP.append(happy[i+j*6])
        sadP.append(sad[i+j*6])
        surpriseP.append(surprise[i+j*6])
        neutralP.append(neutral[i+j*6])
        

    #code below to plot is inspired from: 
    #https://matplotlib.org/3.1.0/gallery/subplots_axes_and_figures/subplots_demo.html


    #now the plot will be printet
    #define amount of subplots    
    fig, axs = plt.subplots(6, sharex=True)
    #give the plot the a title corresponding to test subject
    fig.suptitle('Exp. 2 - Test subject no. {:d}'.format(j+1))
    #define the values
    axs[0].plot(np.arange(6), angryP, '.', linestyle='-')
    #set the title for the subplot
    axs[0].set_title('Angry')
    
    axs[1].plot(np.arange(6), fearP, '.',linestyle='-')
    axs[1].set_title('Fear')
    
    axs[2].plot(np.arange(6), happyP, '.',linestyle='-')
    axs[2].set_title('Happy')
    
    axs[3].plot(np.arange(6), sadP, '.',linestyle='-')
    axs[3].set_title('Sad')
    
    axs[4].plot(np.arange(6), surpriseP, '.',linestyle='-')
    axs[4].set_title('Surprise')
    
    axs[5].plot(np.arange(6), neutralP, '.',linestyle='-')
    axs[5].set_title('Neutral')
    
    #setting the x label
    for ax in axs.flat:
        ax.set(xlabel='Expected emotion per 6 sec. video')
        plt.xticks(np.arange(6),CATEGORIES,rotation=45)
    
    #hide x labels for top plots     
    for ax in axs.flat:
        ax.label_outer()
    #setting height between plots
    plt.subplots_adjust(hspace=2)
    #setting the y label to be in the middle and not too close to the y values
    fig.text(0.06, 0.5, 'Calibrated observation\n\n\n\n\n\n', ha='center', va='center', rotation='vertical')
    plt.show()
    #saving with the command below will not save the full plot
    #plt.savefig('Exp.2-Test subject no. {:d}.png'.format(j+1))
 
#defining the expected prediction      
pred = ['Angry','Fear','Happy','Sad','Surprise','Neutral']*40
 
#plotting the confusion matrix using the imported function   
array = confusion_matrix(actual, pred, labels=["Angry", "Fear", "Happy", "Sad", "Surprise", "Neutral"])
plot_confusion_matrix(cm = array, normalize = False, target_names = ["Angry", "Fear", "Happy", "Sad", "Surprise", "Neutral"])



